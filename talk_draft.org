#+title: JuliaCon 2023 Talk Draft
#+startup: showall

* Talk Parameters

Time slot (according to the calendar invite) is half an hour.

* Outline

 - Evocative story/example; candidates:

   + [[https://en.wikipedia.org/wiki/Ariane_flight_V88][Ariane flight V88]] :: maiden voyage of Ariane 5 rocket; FP exception lead to rocket exploding

   + Something ML related ::

   + Spreadsheet with NaNs :: This should be relatable to lots of people in the room

   + Loop with floating point values :: This is just a good example of why floating point is hard!

     "Who here is afraid of floating point numbers?"

     If every hand goes up, we have an experienced crowd!

     If not, I'm going to show you things that should terrify you.

     #+begin_src julia :results output
       n = 0
       i::Float32 = 0.0
       while i < 1
         global i += 0.1
         global n += 1
       end

       println("With float32: $n iterations")

       n = 0
       j::Float64 = 0.0
       while j < 1
         global j += 0.1
         global n += 1
       end

       println("With float64: $n iterations")
     #+end_src

     #+RESULTS:
     : 0
     : 0.0
     : With float32: 10 iterations
     : 0
     : 0.0
     : With float64: 11 iterations

     That example is just meant to show you how tricky floating point can be—unexpected stuff happens.

     Maybe show an example of a 

 - Problem: floating point exceptions are difficult to track

   + Put a quote from the RxInfer issue on a slide
     #+begin_quote
     Now it is impossible to trace back the origin of the very first ~NaN~
     without perform a lot of manual work. This limits the ability to debug the
     code and to prevent these ~NaN~s in the first place.

     [[https://github.com/biaslab/RxInfer.jl/issues/116][RxInfer.jl#116]]
     #+end_quote

 - Our solution: track how floats behave and track what happens to them.

 - Walk-through of how it works.

   This section is our chance to show off some of the aspects of Julia that make it nice to work with. People who love Julia because it's Julia will like this part a lot. (Maybe enough to use our tool!)

   + Type-based method dispatching: show how this is done for *one* instance of a custom type.

   + Explain how this would be super tedious to handle manually. → segue to metaprogramming

     We can throw out some fancy numbers (e.g. 5 bajillion method signatures generated!!! Waaaaaa!!)

   + Stuff is sticky: one ~TrackedFloat~ in one place will spread.

 - (Gentle, well-scripted) live demo

 - Questions?
