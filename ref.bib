@article{goldbergWhatEveryComputer1991,
  title = {What Every Computer Scientist Should Know about Floating-Point Arithmetic},
  author = {Goldberg, David},
  year = {1991},
  journal = {ACM Computing Surveys},
  volume = {23},
  number = {1},
  pages = {5--48},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/103162.103163},
  url = {https://dl.acm.org/doi/10.1145/103162.103163},
  urldate = {2023-04-21},
  abstract = {Floating-point arithmetic is considered as esoteric subject by many people. This is rather surprising, because floating-point is ubiquitous in computer systems: Almost every language has a floating-point datatype; computers from PCs to supercomputers have floating-point accelerators; most compilers will be called upon to compile floating-point algorithms from time to time; and virtually every operating system must respond to floating-point exceptions such as overflow. This paper presents a tutorial on the aspects of floating-point that have a direct impact on designers of computer systems. It begins with background on floating-point representation and rounding error, continues with a discussion of the IEEE floating point standard, and concludes with examples of how computer system builders can better support floating point.},
  langid = {english}
}

@incollection{heislerFinchDomainSpecific2022,
  title = {Finch: {{Domain Specific Language}} and {{Code Generation}} for {{Finite Element}} and {{Finite Volume}} in {{Julia}}},
  shorttitle = {Finch},
  booktitle = {Computational {{Science}} \textendash{} {{ICCS}} 2022},
  author = {Heisler, Eric and Deshmukh, Aadesh and Sundar, Hari},
  year = {2022},
  volume = {13350},
  pages = {118--132},
  publisher = {{Springer International Publishing}},
  doi = {10.1007/978-3-031-08751-6\_9},
  url = {https://link.springer.com/10.1007/978-3-031-08751-6_9},
  urldate = {2023-01-27},
  isbn = {978-3-031-08750-9 978-3-031-08751-6},
  langid = {english},
  file = {/Users/ashton/Zotero/storage/MKS3PE2A/Heisler et al. - 2022 - Finch Domain Specific Language and Code Generatio.pdf}
}

@article{IEEEStandardBinary1985,
  title = {{{IEEE Standard}} for {{Binary Floating-Point Arithmetic}}},
  year = {1985},
  journal = {ANSI/IEEE Std 754-1985},
  pages = {1--20},
  doi = {10.1109/IEEESTD.1985.82928},
  abstract = {A family of commercially feasible ways for new systems to perform binary floating-point arithmetic is defined. This standard specifies basic and extended floating-point number formats; add, subtract, multiply, divide, square root, remainder, and compare operations; conversions between integer and floating-point formats; conversions between different floating-point formats; conversions between basic-format floating-point numbers and decimal strings; and floating-point exceptions and their handling, including nonnumbers.},
  keywords = {binary,Digital arithmetic,Floating-point arithmetic,Standards},
  file = {/Users/ashton/Zotero/storage/23TZFSYS/30711.html}
}

@misc{p-draft-1997,
  title={Handling {IEEE 754} Invalid Operation Exceptions in Real Interval Arithmetic},
  author={Priest, David J.},
  journal={Manuscript, mai},
  note={\url{https://j3-fortran.org/doc/year/97/97-172.pdf}. Accessed 2023-08-16},
  year={1997}
}

@phdthesis{klowerLowprecisionClimateComputing2021,
  type = {{{http://purl.org/dc/dcmitype/Text}}},
  title = {Low-Precision Climate Computing: Preserving Information despite Fewer Bits},
  shorttitle = {Low-Precision Climate Computing},
  author = {Kl{\"o}wer, Milan},
  year = {2021},
  url = {https://ora.ox.ac.uk/objects/uuid:1158e44a-7faf-45a0-8ab1-73c91fd694a6},
  urldate = {2023-05-12},
  abstract = {Progress towards more reliable weather and climate forecasts is limited by the resolution of numerical models and the complexity of simulated processes. Performance is therefore a major bottleneck and current models are not com- putationally efficient. High precision calculations are unnecessary, despite be- ing the standard, given the uncertainties in the climate system and the errors from discretisation, data assimilation and unresolved climate processes. In this thesis, we advance several aspects of low-precision climate computing to preserve information despite fewer bits: An information-preserving com- pression is developed that distinguishes between real and false information to reduce the very large volume of climate data produced by numerical mod- els, while minimising information loss. The bitwise real information content estimates the minimum required precision in climate data, which depends on the variable and is lower than the standard precision-levels of floating-point numbers. The impact of rounding errors introduced by different low-precision arithmetics with deterministic or stochastic rounding modes is analysed in chaotic dynamical systems. Standard floating-point numbers are not the best number format for weather and climate simulations. However, alternatives, such as posits, exist, but it is unclear whether the large effort needed to de- velop the respective hardware for future supercomputers is justified given the moderate advantage they provide in our applications. A much more central issue towards 16-bit climate models is the design of low precision-resilient al- gorithms. A naive transition to 16 bits either fails or was found to cause issues like amplified gravity waves, a change in geostrophy or rounding errors that grow as quickly as discretisation errors. However, many of these issues are found to be preventable with techniques such as scaling or a compensated time integration. Combining techniques, we develop a 16-bit fluid circulation model that approaches 4x speedups on Fujitsu's A64FX processor compared to 64 bits, despite minimal rounding errors. The result of this thesis show that there is little reason to assume that 16-bit weather and climate models are not possible. While the design of models to compute and output only the bitwise real information is challenging, it will be a major step towards computationally efficient digital twins of the Earth's climate system.},
  langid = {english},
  school = {University of Oxford},
  file = {/Users/ashton/Zotero/storage/FSU25ES8/Klöwer - 2021 - Low-precision climate computing preserving inform.pdf}
}

@article{klowerNumberFormatsError2020,
  title = {Number {{Formats}}, {{Error Mitigation}}, and {{Scope}} for 16-{{Bit Arithmetics}} in {{Weather}} and {{Climate Modeling Analyzed With}} a {{Shallow Water Model}}},
  author = {Kl{\"o}wer, Milan and D{\"u}ben, Peter D. and Palmer, T. N.},
  year = {2020},
  journal = {Journal of Advances in Modeling Earth Systems},
  volume = {12},
  number = {10},
  issn = {1942-2466, 1942-2466},
  doi = {10.1029/2020MS002246},
  url = {https://onlinelibrary.wiley.com/doi/10.1029/2020MS002246},
  urldate = {2023-05-11},
  langid = {english},
  file = {/Users/ashton/Zotero/storage/JSGV7Q7D/Klöwer et al. - 2020 - Number Formats, Error Mitigation, and Scope for 16.pdf}
}

@inproceedings{klowerPositsAlternativeFloats2019,
  title = {Posits as an Alternative to Floats for Weather and Climate Models},
  booktitle = {Proceedings of the {{Conference}} for {{Next Generation Arithmetic}} 2019},
  author = {Kl{\"o}wer, Milan and D{\"u}ben, Peter D. and Palmer, Tim N.},
  year = {2019},
  pages = {1--8},
  publisher = {{ACM}},
  doi = {10.1145/3316279.3316281},
  url = {https://dl.acm.org/doi/10.1145/3316279.3316281},
  urldate = {2023-05-11},
  isbn = {978-1-4503-7139-1},
  langid = {english},
  file = {/Users/ashton/Zotero/storage/J6I289XK/Klöwer et al. - 2019 - Posits as an alternative to floats for weather and.pdf}
}

@book{knuthArtComputerProgramming1997,
  title = {The {{Art}} of {{Computer Programming}}, Volume 2: Seminumerical Algorithms},
  author = {Knuth, Donald Ervin},
  year = {1997},
  edition = {3rd},
  publisher = {{Addison-Wesley}},
  isbn = {978-0201896848},
  lccn = {QA76.6 .K64 1997},
  keywords = {Computer algorithms,Computer programming}
}

@misc{SciMLOrdinaryDiffEqJl,
  title = {{{SciML}}/{{OrdinaryDiffEq}}.Jl},
  note={\url{https://github.com/SciML/OrdinaryDiffEq.jl}. Accessed {2023-04-18}},
  year = {2023},
  abstract = {High performance ordinary differential equation (ODE) and differential-algebraic equation (DAE) solvers, including neural ordinary differential equations (neural ODEs) and scientific machine learni...},
  file = {/Users/ashton/Zotero/storage/NVQ2YJVC/OrdinaryDiffEq.html}
}

@article{torontoPracticallyAccurateFloatingPoint2014,
  title = {Practically {{Accurate Floating-Point Math}}},
  author = {Toronto, Neil and McCarthy, Jay},
  year = {2014},
  journal = {Computing in Science \& Engineering},
  volume = {16},
  number = {4},
  pages = {80--95},
  issn = {1521-9615},
  doi = {10.1109/MCSE.2014.90},
  url = {http://ieeexplore.ieee.org/document/6879754/},
  urldate = {2023-03-14},
  langid = {english},
  file = {/Users/ashton/Zotero/storage/SAHMT9YY/Toronto and McCarthy - 2014 - Practically Accurate Floating-Point Math.pdf}
}

@inproceedings{adka-cgo-2023,
author = {Ahrens, Willow and Donenfeld, Daniel and Kjolstad, Fredrik and Amarasinghe, Saman},
title = {{Looplets}: A Language for Structured Coiteration},
publisher = {{ACM}},
doi = {10.1145/3579990.3580020},
booktitle = {{CGO}},
pages = {41--54},
year = {2023}
}

@article{fenics,
  title     = {The {FEniCS} Project Version 1.5},
  author    = {M. S. Alnaes and J. Blechta and J. Hake and A. Johansson and B.  Kehlet and A. Logg and C. Richardson and J. Ring and M. E. Rognes and G. N.  Wells},
  journal   = {Archive of Numerical Software},
  year      = {2015},
  volume    = {3},
  doi       = {10.11588/ans.2015.100.20553},
}

@inproceedings{openfoam,
author = {Maci\`{a}, Sandra and Mart\'{\i}nez-Ferrer, Pedro J. and Mateo, Sergi and Beltran, Vicen\c{c} and Ayguad\'{e}, Eduard},
title = {Assembling a High-Productivity {DSL} for Computational Fluid Dynamics},
publisher = {{ACM}},
doi = {10.1145/3324989.3325721},
booktitle = {{PASC}},
articleno = {11},
numpages = {11},
year = {2019}
}

@misc{dune,
  author={Dune},
  title={{DUNE} Numerics},
  note={\url{https://www.dune-project.org/}. Accessed {2023-06-06}},
  year={2023}
}

@article{firedrake,
author = {Rathgeber, Florian and Ham, David A. and Mitchell, Lawrence and Lange, Michael and Luporini, Fabio and Mcrae, Andrew T. T. and Bercea, Gheorghe-Teodor and Markall, Graham R. and Kelly, Paul H. J.},
title = {{Firedrake}: Automating the Finite Element Method by Composing Abstractions},
publisher = {{ACM}},
volume = {43},
number = {3},
doi = {10.1145/2998441},
journal = {Transactions on Mathematical Software},
articleno = {24},
numpages = {27},
year = {2016}
}

@article{freefem,
  AUTHOR = {Hecht, F.},
  TITLE = {New development in {FreeFem++}},
  JOURNAL = {Journal of Numerical Mathematics},
  VOLUME = {20},
  YEAR = {2012},
  NUMBER = {3-4},
  PAGES = {251--265},
  ISSN = {1570-2820},
  MRCLASS = {65Y15},
  MRNUMBER = {3043640},
  URL = {https://freefem.org/}
}

@inproceedings{dendro,
author = {Fernando, Milinda and Neilsen, David and Hirschmann, Eric W. and Sundar, Hari},
title = {A Scalable Framework for Adaptive Computational General Relativity on Heterogeneous Clusters},
publisher = {{ACM}},
doi = {10.1145/3330345.3330346},
booktitle = {{SC}},
pages = {1–12},
year = {2019}
}

@article{sdjmrstp-pc-2022,
  title={Linear solvers for power grid optimization problems: A review of {GPU}-accelerated linear solvers},
  author={{\'S}wirydowicz, Kasia and Darve, Eric and Jones, Wesley and Maack, Jonathan and Regev, Shaked and Saunders, Michael A and Thomas, Stephen J. and Pele{\v{s}}, Slaven},
  journal={Parallel Computing},
  volume={111},
  pages={102870},
  year={2022},
  publisher={Elsevier}
}

@article{hamlet1994random,
  title={Random testing},
  author={Hamlet, Richard},
  journal={Encyclopedia of Software Engineering},
  volume={2},
  pages={971--978},
  year={1994},
  doi={10.1002/0471028959},
  publisher={Wiley}
}

@inproceedings{ddghlllprr-correctness-2022,
  author       = {James Demmel and Jack J. Dongarra and Mark Gates and Greg Henry and Julien Langou and Xiaoye S. Li and Piotr Luszczek and Weslley S. Pereira and E. Jason Riedy and Cindy Rubio{-}Gonz{\'{a}}lez},
  title        = {Proposed Consistent Exception Handling for the {BLAS} and {LAPACK}},
  booktitle    = {{Correctness@SC}},
  pages        = {1--9},
  publisher    = {{IEEE}},
  doi          = {10.1109/Correctness56720.2022.00006},
  year         = {2022}
}

@inproceedings{gllprt-correctness-2021,
  author       = {Ganesh Gopalakrishnan and Ignacio Laguna and Ang Li and Pavel Panchekha and Cindy Rubio{-}Gonz{\'{a}}lez and Zachary Tatlock},
  title        = {Guarding Numerics Amidst Rising Heterogeneity},
  booktitle    = {{Correctness@SC}},
  pages        = {9--15},
  publisher    = {{IEEE}},
  doi          = {10.1109/Correctness54621.2021.00007},
  year         = {2021}
}

@misc{fpchecker-reports,
  author={{FPChecker}},
  title={Open Source Reports},
  note={\url{https://fpchecker.org/open-source-reports.html}. Accessed {2023-06-16}},
  year={2023}
}

@inproceedings{llg-soap-2022,
  author       = {Ignacio Laguna and Xinyi Li and Ganesh Gopalakrishnan},
  title        = {{BinFPE}: accurate floating-point exception detection for {GPU} applications},
  booktitle    = {{SOAP}},
  pages        = {1--8},
  publisher    = {{ACM}},
  doi          = {10.1145/3520313.3534655},
  year         = {2022}
}

@inproceedings{bllmg-xloop-2022,
  author       = {Dorra {Ben Khalifa} and Xinyi Li and Ignacio Laguna and Matthieu Martel and Ganesh Gopalakrishnan},
  title        = {Toward Increasing Trust in Exascale Simulations},
  booktitle    = {{XLOOP}},
  pages        = {26--31},
  publisher    = {{IEEE}},
  doi          = {10.1109/XLOOP56614.2022.00010},
  year         = {2022}
}

@misc{github-issues,
  author={{GitHub}},
  title={Issue Search: \texttt{NaN+infinity}},
  note={\url{https://github.com/search?q=NaN+infinity++state%3Aopen&type=issues&ref=advsearch}. Accessed {2023-06-16}},
  year={2023}
}

@inproceedings{llsflg-hpdc-2023,
author = {Xinyi Li and Ignacio Laguna and Katarzyna Swirydowicz and Bo Fang and Ang Li and Ganesh Gopalakrishnan},
title = {Design and Evaluation of {GPU-FPX}: A Low-Overhead tool for Floating-Point Exception Detection in {NVIDIA GPUs}},
booktitle = {ACM HPDC 2023},
year = 2023,
doi = {10.11578/dc.20230713.4},
url = {https://www.osti.gov/biblio/1989443}}

@article{OceananigansJOSS,
  doi = {10.21105/joss.02018},
  year = {2020},
  publisher = {The Open Journal},
  volume = {5},
  number = {53},
  pages = {2018},
  author = {Ali Ramadhan and Gregory LeClaire Wagner and Chris Hill and Jean-Michel Campin and Valentin Churavy and Tim Besard and Andre Souza and Alan Edelman and Raffaele Ferrari and John Marshall},
  title = {{Oceananigans.jl: Fast and friendly geophysical fluid dynamics on GPUs}},
  journal = {Journal of Open Source Software}
}

@inproceedings{l-ase-2019,
  author       = {Ignacio Laguna},
  title        = {{FPChecker}: Detecting Floating-Point Exceptions in {GPU} Applications},
  booktitle    = {{ASE}},
  pages        = {1126--1129},
  publisher    = {{IEEE}},
  doi          = {10.1109/ASE.2019.00118},
  year         = {2019}
}

@inproceedings{ltlg-iiswc-2022,
  author       = {Ignacio Laguna and Tanmay Tirpankar and Xinyi Li and Ganesh Gopalakrishnan},
  title        = {{FPChecker}: Floating-Point Exception Detection Tool and Benchmark for
                  Parallel and Distributed {HPC}},
  booktitle    = {{IISWC}},
  pages        = {39--50},
  publisher    = {{IEEE}},
  doi          = {10.1109/IISWC55918.2022.00014},
  year         = {2022}
}

@misc{kMilanklSherlogsJl2021,
  title = {Milankl/{{Sherlogs}}.Jl},
  author = {Kl{\"o}wer, Milan and {OnButtonUp}},
  year = {2021},
  doi = {10.5281/ZENODO.5115765},
  organization = {{Zenodo}},
  edition = {v0.2.0}
}

@article{humphreySystematicDebuggingMethods2014,
  title = {Systematic {{Debugging Methods}} for {{Large-Scale HPC Computational Frameworks}}},
  author = {Humphrey, Alan and Meng, Qingyu and Berzins, Martin and De Oliveira, Diego Caminha B. and Rakamaric, Zvonimir and Gopalakrishnan, Ganesh},
  date = {2014-05},
  journal = {Computing in Science \& Engineering},
  shortjournal = {Comput. Sci. Eng.},
  volume = {16},
  number = {3},
  pages = {48--56},
  issn = {1521-9615, 1558-366X},
  doi = {10.1109/MCSE.2014.11},
  url = {https://ieeexplore.ieee.org/document/6729885/},
  urldate = {2023-08-02}
}

@inproceedings{panchekhaAutomaticallyImprovingAccuracy2015,
  title = {Automatically Improving Accuracy for Floating Point Expressions},
  author = {Panchekha, Pavel and Sanchez-Stern, Alex and Wilcox, James R. and Tatlock, Zachary},
  date = {2015-06-03},
  series = {{{PLDI}} '15},
  pages = {1--11},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/2737924.2737959},
  url = {https://dl.acm.org/doi/10.1145/2737924.2737959},
  urldate = {2023-08-08},
  abstract = {Scientific and engineering applications depend on floating point arithmetic to approximate real arithmetic. This approximation introduces rounding error, which can accumulate to produce unacceptable results. While the numerical methods literature provides techniques to mitigate rounding error, applying these techniques requires manually rearranging expressions and understanding the finer details of floating point arithmetic. We introduce Herbie, a tool which automatically discovers the rewrites experts perform to improve accuracy. Herbie's heuristic search estimates and localizes rounding error using sampled points (rather than static error analysis), applies a database of rules to generate improvements, takes series expansions, and combines improvements for different input regions. We evaluated Herbie on examples from a classic numerical methods textbook, and found that Herbie was able to improve accuracy on each example, some by up to 60 bits, while imposing a median performance overhead of 40\%. Colleagues in machine learning have used Herbie to significantly improve the results of a clustering algorithm, and a mathematical library has accepted two patches generated using Herbie.},
  isbn = {978-1-4503-3468-6},
  keywords = {Floating point,numerical accuracy,program rewriting},
  file = {/Users/ashton/Zotero/storage/3JNZIJHA/Panchekha et al. - 2015 - Automatically improving accuracy for floating poin.pdf}
}

@article{misbackOdysseyInteractiveWorkbench2023,
  author       = {Edward Misback and
                  Caleb Chan and
                  Brett Saiki and
                  Eunice Jun and
                  Zachary Tatlock and
                  Pavel Panchekha},
  title        = {{Odyssey}: An Interactive Workbench for Expert-Driven Floating-Point Expression Rewriting},
  journal      = {CoRR},
  volume       = {abs/2305.10599},
  doi          = {10.48550/arXiv.2305.10599},
  eprinttype    = {arXiv},
  eprint       = {2305.10599},
  year         = {2023}
}

@inproceedings{arnoldStackTraceAnalysis2007,
  title = {Stack {{Trace Analysis}} for {{Large Scale Debugging}}},
  booktitle = {2007 {{IEEE International Parallel}} and {{Distributed Processing Symposium}}},
  author = {Arnold, Dorian C. and Ahn, Dong H. and de Supinski, Bronis R. and Lee, Gregory L. and Miller, Barton P. and Schulz, Martin},
  options = {useprefix=true},
  date = {2007-03},
  pages = {1--10},
  issn = {1530-2075},
  doi = {10.1109/IPDPS.2007.370254},
  abstract = {We present the Stack Trace Analysis Tool (STAT) to aid in debugging extreme-scale applications. STAT can reduce problem exploration spaces from thousands of processes to a few by sampling stack traces to form process equivalence classes, groups of processes exhibiting similar behavior. We can then use full-featured debuggers on representatives from these behavior classes for root cause analysis. STAT scalably collects stack traces over a sampling period to assemble a profile of the application's behavior. STAT routines process the samples to form a call graph prefix tree that encodes common behavior classes over the program's process space and time. STAT leverages MRNet, an infrastructure for tool control and data analyses, to overcome scalability barriers faced by heavy-weight debuggers. We present STAT's design and an evaluation that shows STAT gathers informative process traces from thousands of processes with sub-second latencies, a significant improvement over existing tools. Our case studies of production codes verify that STAT supports the quick identification of errors that were previously difficult to locate.},
  eventtitle = {2007 {{IEEE International Parallel}} and {{Distributed Processing Symposium}}},
  keywords = {Assembly,Data analysis,Debugging,Delay,Large-scale systems,Production,Sampling methods,Scalability,Space exploration,Tree graphs},
  file = {/Users/ashton/Zotero/storage/TJG4AGTU/Arnold et al. - 2007 - Stack Trace Analysis for Large Scale Debugging.pdf;/Users/ashton/Zotero/storage/WEW7XYTV/4227982.html}
}

@article{houghIEEEStandard7542019,
  title = {The {{IEEE Standard}} 754: {{One}} for the {{History Books}}},
  shorttitle = {The {{IEEE Standard}} 754},
  author = {Hough, David G.},
  date = {2019-12},
  journaltitle = {Computer},
  shortjournal = {Computer},
  volume = {52},
  number = {12},
  pages = {109--112},
  issn = {0018-9162, 1558-0814},
  doi = {10.1109/MC.2019.2926614},
  url = {https://ieeexplore.ieee.org/document/8909942/},
  urldate = {2023-07-07},
  langid = {english},
  file = {/Users/ashton/Zotero/storage/2GJNGKKI/Hough - 2019 - The IEEE Standard 754 One for the History Books.pdf}
}

@inproceedings{dindaSpyingFloatingPoint2020,
  title = {Spying on the {{Floating Point Behavior}} of {{Existing}}, {{Unmodified Scientific Applications}}},
  series = {HPDC 2020},
  author = {Dinda, Peter and Bernat, Alex and Hetland, Conor},
  date = {2020-06-23},
  pages = {5--16},
  publisher = {{ACM}},
  location = {{Stockholm Sweden}},
  doi = {10.1145/3369583.3392673},
  url = {https://dl.acm.org/doi/10.1145/3369583.3392673},
  urldate = {2023-08-09},
  abstract = {Scientific (and other) applications are critically dependent on calculations done using IEEE floating point arithmetic. A number of concerns have been raised about correctness in such applications given the numerous gotchas the IEEE standard presents for developers, as well as the complexity of its implementation at the hardware and compiler levels. The standard and its implementations do provide mechanisms for analyzing floating point arithmetic as it executes, making it possible to find and track problematic operations. However, this capability is seldom used in practice. In response, we have developed FPSpy, a tool that provides this capability when operating underneath existing, unmodified x64 application binaries on Linux, including those using thread- and process-level parallelism. FPSpy can observe application behavior without any cooperation from the application or developer, and can potentially be deployed as part of a job launch process. We present the design, implementation, and performance evaluation of FPSpy. FPSpy operates conservatively, getting out of the way if the application itself begins to use any of the OS or hardware features that FPSpy depends on. Its overhead can be throttled, allowing a tradeoff between which and how many unusual events are to be captured, and the slowdown incurred by the application, with the low point providing virtually zero slowdown. We evaluated FPSpy by using it to methodically study seven widely-used applications/frameworks from a range of domains (five of which are in the NSF XSEDE top-20), as well as the NAS and PARSEC benchmark suites. All told, these comprise about 7.5 million lines of source code in a wide range of languages, and parallelism models (including OpenMP and MPI). FPSpy was able to produce trace information for all of them. The traces show that problematic floating point events occur in both the applications and the benchmarks. Analysis of the rounding behavior captured in our traces also suggests the feasibility of an approach to adding adaptive precision underneath existing, unmodified binaries.},
  eventtitle = {{{HPDC}} '20: {{The}} 29th {{International Symposium}} on {{High-Performance Parallel}} and {{Distributed Computing}}},
  isbn = {978-1-4503-7052-3},
  langid = {english},
  file = {/Users/ashton/Zotero/storage/BH95UQWA/hpdc20.pdf}
}

@book{mullerHandbookFloatingPointArithmetic2018,
  title = {Handbook of {{Floating-Point Arithmetic}}},
  author = {Muller, Jean-Michel and Brunie, Nicolas and De Dinechin, Florent and Jeannerod, Claude-Pierre and Joldes, Mioara and Lefèvre, Vincent and Melquiond, Guillaume and Revol, Nathalie and Torres, Serge},
  date = {2018},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-319-76526-6},
  url = {http://link.springer.com/10.1007/978-3-319-76526-6},
  urldate = {2023-08-16},
  isbn = {978-3-319-76525-9 978-3-319-76526-6},
  langid = {english},
  file = {/Users/ashton/Zotero/storage/3KCL3I6V/Muller et al. - 2018 - Handbook of Floating-Point Arithmetic.pdf}
}

@article{fp8,
  author       = {Paulius Micikevicius and
                  Dusan Stosic and
                  Neil Burgess and
                  Marius Cornea and
                  Pradeep Dubey and
                  Richard Grisenthwaite and
                  Sangwon Ha and
                  Alexander Heinecke and
                  Patrick Judd and
                  John Kamalu and
                  Naveen Mellempudi and
                  Stuart F. Oberman and
                  Mohammad Shoeybi and
                  Michael Y. Siu and
                  Hao Wu},
  title        = {{FP8} Formats for Deep Learning},
  journal      = {CoRR},
  volume       = {abs/2209.05433},
  doi          = {10.48550/arXiv.2209.05433},
  year         = {2022}
}
